version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: grc-postgres-enhanced
    environment:
      POSTGRES_DB: grc_platform
      POSTGRES_USER: grc_user
      POSTGRES_PASSWORD: grc_password
    volumes:
      - postgres_data_enhanced:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grc_user -d grc_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grc-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: grc-redis-enhanced
    ports:
      - "6379:6379"
    volumes:
      - redis_data_enhanced:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - grc-network

  # Policy Management Service
  policy-service:
    build:
      context: ./backend/services
      dockerfile: Dockerfile.policy
    container_name: grc-policy-service
    environment:
      DATABASE_URL: postgresql://grc_user:grc_password@postgres:5432/grc_platform
      REDIS_URL: redis://redis:6379
      VECTOR_DB_PATH: /app/vector_db
    ports:
      - "8001:8001"
    volumes:
      - ./backend/services:/app
      - ./vector-db:/app/vector_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - grc-network
    restart: unless-stopped

  # Risk Management Service
  risk-service:
    build:
      context: ./backend/services
      dockerfile: Dockerfile.risk
    container_name: grc-risk-service
    environment:
      DATABASE_URL: postgresql://grc_user:grc_password@postgres:5432/grc_platform
      REDIS_URL: redis://redis:6379
      VECTOR_DB_PATH: /app/vector_db
    ports:
      - "8002:8002"
    volumes:
      - ./backend/services:/app
      - ./vector-db:/app/vector_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - grc-network
    restart: unless-stopped

  # Compliance Management Service
  compliance-service:
    build:
      context: ./backend/services
      dockerfile: Dockerfile.compliance
    container_name: grc-compliance-service
    environment:
      DATABASE_URL: postgresql://grc_user:grc_password@postgres:5432/grc_platform
      REDIS_URL: redis://redis:6379
      VECTOR_DB_PATH: /app/vector_db
    ports:
      - "8003:8003"
    volumes:
      - ./backend/services:/app
      - ./vector-db:/app/vector_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - grc-network
    restart: unless-stopped

  # Workflow Management Service
  workflow-service:
    build:
      context: ./backend/services
      dockerfile: Dockerfile.workflow
    container_name: grc-workflow-service
    environment:
      DATABASE_URL: postgresql://grc_user:grc_password@postgres:5432/grc_platform
      REDIS_URL: redis://redis:6379
    ports:
      - "8004:8004"
    volumes:
      - ./backend/services:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - grc-network
    restart: unless-stopped

  # Enhanced AI Agents
  ai-agents:
    build:
      context: ./ai-agents
      dockerfile: Dockerfile.enhanced
    container_name: grc-ai-agents-enhanced
    environment:
      DATABASE_URL: postgresql://grc_user:grc_password@postgres:5432/grc_platform
      REDIS_URL: redis://redis:6379
      VECTOR_DB_PATH: /app/vector_db
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      PINECONE_API_KEY: ${PINECONE_API_KEY:-}
    ports:
      - "8005:8005"
    volumes:
      - ./ai-agents:/app
      - ./vector-db:/app/vector_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - grc-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: grc-api-gateway
    environment:
      POLICY_SERVICE_URL: http://policy-service:8001
      RISK_SERVICE_URL: http://risk-service:8002
      COMPLIANCE_SERVICE_URL: http://compliance-service:8003
      WORKFLOW_SERVICE_URL: http://workflow-service:8004
      AI_AGENTS_URL: http://ai-agents:8005
      REDIS_URL: redis://redis:6379
    ports:
      - "8000:8000"
    volumes:
      - ./backend/api-gateway:/app
    depends_on:
      - policy-service
      - risk-service
      - compliance-service
      - workflow-service
      - ai-agents
    networks:
      - grc-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: grc-frontend-enhanced
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
    networks:
      - grc-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: grc-nginx-enhanced
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - grc-network
    restart: unless-stopped

volumes:
  postgres_data_enhanced:
    driver: local
  redis_data_enhanced:
    driver: local

networks:
  grc-network:
    driver: bridge
