name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        node-version: ["16", "18", "20"]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: grc_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Node dependencies
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Install Node dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint Python code
      run: |
        flake8 backend/src/
        black --check backend/src/
        mypy backend/src/

    - name: Lint JavaScript code
      run: |
        cd frontend
        npm run lint

    - name: Run Python tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/grc_platform_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd backend
        pytest tests/ -v --cov=src --cov-report=xml

    - name: Run JavaScript tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      if: secrets.springm125 != '' && secrets.KOustubh@123 != ''
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.pringm125 }}
        password: ${{ secrets.KOustubh@123 }}

    - name: Build and push backend image
      if: secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != ''
      uses: docker/build-push-action@v3
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.KOUSTUBH123 }}/grc-platform-backend:latest
          ${{ secrets.KOUSTUBH123 }}/grc-platform-backend:${{ github.sha }}

    - name: Build and push frontend image
      if: secrets.springm125 != '' && secrets.KOustubh@123 != ''
      uses: docker/build-push-action@v3
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.KOUSTUBH_SONEKAR }}/grc-platform-frontend:latest
          ${{ secrets.KOUSTUBH_SONEKAR }}/grc-platform-frontend:${{ github.sha }}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add deployment commands here

    - name: Run smoke tests
      run: |
        echo "Running smoke tests"
        # Add smoke test commands here

    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment"
        # Add production deployment commands here
