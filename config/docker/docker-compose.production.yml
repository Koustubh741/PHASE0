# Docker Compose Configuration for Production BFSI API
# Includes reverse proxy with TLS termination and security configurations

version: '3.8'

services:
  # BFSI API Service
  bfsi-api:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.bfsi-api
    container_name: bfsi-api
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8009
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
      - TIMEOUT_KEEP_ALIVE=5
      - LIMIT_MAX_REQUESTS=10000
      - LIMIT_CONCURRENCY=1000
      - LIMIT_REQUEST_BODY=10485760
      - LOG_LEVEL=info
      - ACCESS_LOG=true
      - USE_COLORS=false
    networks:
      - bfsi-network
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    user: "1000:1000"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Nginx Reverse Proxy
  nginx-proxy:
    image: nginx:1.27.4-alpine
    container_name: bfsi-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/bfsi-api.conf:/etc/nginx/conf.d/bfsi-api.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
      - ./.htpasswd:/etc/nginx/.htpasswd:ro
    networks:
      - bfsi-network
    depends_on:
      - bfsi-api
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    user: "101:101"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: bfsi-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - bfsi-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "999:999"
    cap_drop:
      - ALL

  # Database (PostgreSQL for production)
  postgres:
    image: postgres:15-alpine
    container_name: bfsi-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=bfsi_production
      - POSTGRES_USER=bfsi_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_db_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - bfsi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bfsi_user -d bfsi_production"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    user: "70:70"
    cap_drop:
      - ALL

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: bfsi-prometheus
    restart: unless-stopped
    # Removed direct port exposure for security
    # Access only through nginx proxy with authentication
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/web.yml:/etc/prometheus/web.yml:ro
      - prometheus-data:/prometheus
    networks:
      - bfsi-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.config.file=/etc/prometheus/web.yml'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Log aggregation
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: bfsi-fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/fluentd
    networks:
      - bfsi-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    user: "100:100"
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  bfsi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
