version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: grc-postgres
    environment:
      POSTGRES_DB: grc_platform
      POSTGRES_USER: grc_user
      POSTGRES_PASSWORD: grc_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - grc-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grc_user -d grc_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: grc-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - grc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: grc-backend
    environment:
      - DATABASE_URL=postgresql://grc_user:grc_password@postgres:5432/grc_platform
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=demo-secret-key-change-in-production
      - DEBUG=true
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - grc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: grc-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - grc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./backend/src/core/infrastructure/api_gateway
      dockerfile: Dockerfile
    container_name: grc-api-gateway
    environment:
      - BACKEND_URL=http://backend:8000
      - FRONTEND_URL=http://frontend:3000
      - REDIS_URL=redis://redis:6379
    ports:
      - "8080:8080"
    depends_on:
      - backend
      - redis
    networks:
      - grc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BFSI AI Agents Service
  bfsi-ai-agents:
    build:
      context: ./backend/services/bfsi
      dockerfile: Dockerfile
    container_name: grc-bfsi-ai-agents
    environment:
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379
      - AI_MODEL_PATH=/app/models
    ports:
      - "8001:8001"
    volumes:
      - ./backend/services/bfsi:/app
      - ./data:/app/data
    depends_on:
      - backend
      - redis
    networks:
      - grc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: grc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - api-gateway
    networks:
      - grc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  grc-network:
    driver: bridge
