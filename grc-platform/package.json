{
  "name": "grc-platform",
  "version": "1.0.0",
  "description": "GRC Platform - Governance, Risk, and Compliance Management System",
  "private": true,
  "workspaces": [
    "apps/*",
    "frontend",
    "shared/*"
  ],
  "scripts": {
    "install:all": "npm install && npm run install:frontend && npm run install:backend",
    "install:frontend": "cd frontend && npm install",
    "install:backend": "npm run install:services",
    "install:services": "npm run install:api-gateway && npm run install:policy && npm run install:risk && npm run install:compliance && npm run install:workflow && npm run install:ai-agents",
    "install:api-gateway": "cd apps/api-gateway && pip install -r requirements.txt",
    "install:policy": "cd apps/policy-service && pip install -r requirements.txt",
    "install:risk": "cd apps/risk-service && pip install -r requirements.txt",
    "install:compliance": "cd apps/compliance-service && pip install -r requirements.txt",
    "install:workflow": "cd apps/workflow-service && pip install -r requirements.txt",
    "install:ai-agents": "cd apps/ai-agents && pip install -r requirements.txt",
    "start": "concurrently \"npm run start:backend\" \"npm run start:frontend\"",
    "start:frontend": "cd frontend && npm start",
    "start:backend": "npm run start:services",
    "start:services": "concurrently \"npm run start:api-gateway\" \"npm run start:policy\" \"npm run start:risk\" \"npm run start:compliance\" \"npm run start:workflow\" \"npm run start:ai-agents\"",
    "start:api-gateway": "cd apps/api-gateway && python -m uvicorn src.main:app --reload --port 8000",
    "start:policy": "cd apps/policy-service && python -m uvicorn src.main:app --reload --port 8001",
    "start:risk": "cd apps/risk-service && python -m uvicorn src.main:app --reload --port 8002",
    "start:compliance": "cd apps/compliance-service && python -m uvicorn src.main:app --reload --port 8003",
    "start:workflow": "cd apps/workflow-service && python -m uvicorn src.main:app --reload --port 8004",
    "start:ai-agents": "cd apps/ai-agents && python -m uvicorn src.main:app --reload --port 8005",
    "build": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "npm run build:services",
    "build:services": "npm run build:api-gateway && npm run build:policy && npm run build:risk && npm run build:compliance && npm run build:workflow && npm run build:ai-agents",
    "build:api-gateway": "cd apps/api-gateway && python -m build",
    "build:policy": "cd apps/policy-service && python -m build",
    "build:risk": "cd apps/risk-service && python -m build",
    "build:compliance": "cd apps/compliance-service && python -m build",
    "build:workflow": "cd apps/workflow-service && python -m build",
    "build:ai-agents": "cd apps/ai-agents && python -m build",
    "test": "npm run test:frontend && npm run test:backend",
    "test:frontend": "cd frontend && npm test",
    "test:backend": "npm run test:services",
    "test:services": "npm run test:api-gateway && npm run test:policy && npm run test:risk && npm run test:compliance && npm run test:workflow && npm run test:ai-agents",
    "test:api-gateway": "cd apps/api-gateway && pytest",
    "test:policy": "cd apps/policy-service && pytest",
    "test:risk": "cd apps/risk-service && pytest",
    "test:compliance": "cd apps/compliance-service && pytest",
    "test:workflow": "cd apps/workflow-service && pytest",
    "test:ai-agents": "cd apps/ai-agents && pytest",
    "lint": "npm run lint:frontend && npm run lint:backend",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:backend": "npm run lint:services",
    "lint:services": "npm run lint:api-gateway && npm run lint:policy && npm run lint:risk && npm run lint:compliance && npm run lint:workflow && npm run lint:ai-agents",
    "lint:api-gateway": "cd apps/api-gateway && flake8 src && black --check src",
    "lint:policy": "cd apps/policy-service && flake8 src && black --check src",
    "lint:risk": "cd apps/risk-service && flake8 src && black --check src",
    "lint:compliance": "cd apps/compliance-service && flake8 src && black --check src",
    "lint:workflow": "cd apps/workflow-service && flake8 src && black --check src",
    "lint:ai-agents": "cd apps/ai-agents && flake8 src && black --check src",
    "lint:fix": "npm run lint:fix:frontend && npm run lint:fix:backend",
    "lint:fix:frontend": "cd frontend && npm run lint:fix",
    "lint:fix:backend": "npm run lint:fix:services",
    "lint:fix:services": "npm run lint:fix:api-gateway && npm run lint:fix:policy && npm run lint:fix:risk && npm run lint:fix:compliance && npm run lint:fix:workflow && npm run lint:fix:ai-agents",
    "lint:fix:api-gateway": "cd apps/api-gateway && black src && flake8 src",
    "lint:fix:policy": "cd apps/policy-service && black src && flake8 src",
    "lint:fix:risk": "cd apps/risk-service && black src && flake8 src",
    "lint:fix:compliance": "cd apps/compliance-service && black src && flake8 src",
    "lint:fix:workflow": "cd apps/workflow-service && black src && flake8 src",
    "lint:fix:ai-agents": "cd apps/ai-agents && black src && flake8 src",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "setup": "npm run setup:backend && npm run setup:frontend",
    "setup:backend": "npm run install:backend",
    "setup:frontend": "cd frontend && npm install",
    "clean": "npm run clean:frontend && npm run clean:backend",
    "clean:frontend": "cd frontend && rm -rf node_modules build",
    "clean:backend": "find apps -name '__pycache__' -type d -exec rm -rf {} + && find apps -name '*.pyc' -delete",
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "npm run start:backend",
    "dev:frontend": "cd frontend && npm start"
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/grc-platform/grc-platform.git"
  },
  "keywords": [
    "grc",
    "governance",
    "risk",
    "compliance",
    "ai",
    "agents",
    "monorepo"
  ],
  "author": "GRC Platform Team",
  "license": "MIT"
}
