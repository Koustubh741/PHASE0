version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: grc-postgres
    environment:
      POSTGRES_DB: grc_platform
      POSTGRES_USER: grc_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-grc_secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - grc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grc_user -d grc_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: grc-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password_123} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - grc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # GRC Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: grc-backend
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: grc_platform
      POSTGRES_USER: grc_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-grc_secure_password_123}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password_123}
      REDIS_DB: 0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Application
      APP_NAME: GRC Platform
      DEBUG: ${DEBUG:-false}
      VERSION: 1.0.0
      
      # Vector Store
      VECTOR_STORE_DIR: /app/vector_store
      VECTOR_COLLECTION: compliance-policies
      
      # Services
      POLICY_SERVICE_URL: http://backend:8000
      RISK_SERVICE_URL: http://backend:8000
      COMPLIANCE_SERVICE_URL: http://backend:8000
      WORKFLOW_SERVICE_URL: http://backend:8000
      AI_AGENTS_URL: http://backend:8000
    volumes:
      - ./logs:/app/logs
      - ./vector_store:/app/vector_store
      - ./static:/app/static
    ports:
      - "8000:8000"
    networks:
      - grc-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: grc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
    networks:
      - grc-network
    depends_on:
      - backend
    restart: unless-stopped

  # Database Migration Service
  migration:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: grc-migration
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: grc_platform
      POSTGRES_USER: grc_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-grc_secure_password_123}
    volumes:
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    networks:
      - grc-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        alembic upgrade head &&
        echo 'Database migration completed'
      "
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  grc-network:
    driver: bridge
